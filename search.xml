<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[springboot使用第三方jar]]></title>
    <url>%2F2020%2F05%2F13%2Fspringboot%2Fspringboot%E5%8A%A0%E8%BD%BD%E7%AC%AC%E4%B8%89%E6%96%B9jar%2F</url>
    <content type="text"><![CDATA[SpringBoot引入将第三方jar一、导入jar 在dependency中指定jar 其中groupId、artifactId、version、可随意填写 scope必须为system systemPath为jar包路径 ${project.basedir}为项目根目录 123456789&lt;!-- 农行网上支付平台--&gt; &lt;dependency&gt; &lt;groupId&gt;com.abc.ebusclient&lt;/groupId&gt; &lt;artifactId&gt;ebusclient&lt;/artifactId&gt; &lt;version&gt;3.1.8&lt;/version&gt; &lt;scope&gt;system&lt;/scope&gt;&lt;!-- &lt;systemPath&gt;$&#123;project.basedir&#125;/src/main/resources/lib/TrustPayClient-V3.1.8.jar&lt;/systemPath&gt;--&gt; &lt;systemPath&gt;$&#123;project.basedir&#125;/lib/TrustPayClient-V3.1.8.jar&lt;/systemPath&gt; &lt;/dependency&gt; 打包配置，需要在build-plugins中配置 123456789&lt;!--如果是打jar包，则需在build的plugins中添加如下配置--&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;!--值为true是指打包时包含scope为system的第三方Jar包--&gt; &lt;includeSystemScope&gt;true&lt;/includeSystemScope&gt; &lt;/configuration&gt; &lt;/plugin&gt; 二、指定classptsh下配置文件​ 第三方jar需要指定位置配置文件，比如classpath，在Springboot中，main/resources目录为默认classpath ​ 当通过true无法打入jar，可通过pom.xml文件中的resource指定，配置如下： 12345678910111213141516&lt;resources&gt; &lt;!-- 必须配置，将配置文件打包到classpath--&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;/resource&gt; &lt;!-- 必须，否则打包时无法将jar打入指定lib--&gt; &lt;resource&gt; &lt;!--&lt;directory&gt;src/main/resources/lib&lt;/directory&gt;--&gt; &lt;directory&gt;$&#123;project.basedir&#125;/lib&lt;/directory&gt; &lt;targetPath&gt;BOOT-INF/lib/&lt;/targetPath&gt; &lt;includes&gt; &lt;include&gt;**/*.jar&lt;/include&gt; &lt;/includes&gt; &lt;/resource&gt;&lt;/resources&gt;]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next主题相关设置]]></title>
    <url>%2F2020%2F05%2F13%2Fhexo%2FHexo-Next%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[在Hexo中有两个很重要的名为_config.yml的文件，其中一个在站点安装的根目录下，另一个在主题目录下。 前者提供了Hexo自身的一些基本配置信息，后者为你所安装的主题的相关配置。 为了方便区分，我们把前者称为站点配置文件，后者称为主题配置文件。 使用Next主题 在博客根目录执行git命令 1git clone https://github.com/iissnan/hexo-theme-next themes/next 修改主题配置文件 1theme: next 修改语言 编辑站点配置文件，将language设置成所需要的语言 具体支持语言可以查看 官方说明 例如设置成简体中文 1language: zh-Hansyaml 修改布局 编辑主题配置文件 修改 Schemes配置 12345# Schemes 四种布局# scheme: Muse# scheme: Mist# scheme: Piscesscheme: Gemini 添加标签页 在博客根目录进入cmd执行命令 1hexo new page tags 编辑source/tags/index.md文件 123title: 标签date: 2019-06-30 02:59:16type: tags 添加分类 在博客根目录下进入cmd执行命令 1hexo new page categories 编辑source/categories/index.md文件 123 title: 分类date: 2019-06-30 03:01:37 type: &quot;categories&quot; 设置菜单 编辑主题配置文件 修改menu配置 12345678home: / || home 首页 #about: /about/ || user 关于tags: /tags/ || tags 标签页 categories: /categories/ || th 分类页archives: /archives/ || archive 归档页 # schedule: /schedule/ || calendar#sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 设置头像 编辑主题配置文件,修改avatar字段，设置头像的地址 头像地址有两种 完整的互联网URL 站点下的地址 可以是source/uploads/目录下 或者是source/images/目录下 1avatar: /uploads/kenan.jpg 设置网站Favicon图标 编辑主题配置文件 首先选择想要设置的图片通过favicon转换网站制作，如：比特虫，制作一个32 * 32.icon 将图片改名为：favicon.ico, 放到/themes/next/source/images目录下 修改favicon配置： 12345favicon: small: /images/favicon-16x16-next.png medium: /images/favicon.ico #修改这一行apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg 1234567891011 ### 设置首页预览和阅读全文 - 编辑``主题配置文件` - 修改`auto_excerpt`的配置 ```yaml auto_excerpt: enable: true length: 300 添加本地搜索 在博客根目录下进入cmd中执行命令 1npm install hexo-generator-searchdb --save 编辑站点配置文件，添加以下配置 12345search: path: search.xml field: post format: html limit: 10000 编辑主题配置文件，修改local_search属性，将false修改为true 12local_search: enable: true]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Jenkins安装]]></title>
    <url>%2F2020%2F03%2F20%2F%E5%90%8E%E7%AB%AF%2F%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%2F4-Jenkins%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[Jenkins安装启动Jenkin安装启动方式有很多种，比如下载war包后放在tomcat中启动、使用rpm安装、或者使用Docker安装，这里先使用Docker进行安装。 Docker安装Jenkin 查看版本1docker search jenkins 123456[root@localhost opt]# docker search jenkins NAME DESCRIPTION STARS OFFICIAL AUTOMATED jenkins Official Jenkins Docker image 4698 [OK] jenkins/jenkins The leading open source automation server 1954 jenkinsci/blueocean https://jenkins.io/projects/blueocean ....... 默认下载latest版 1sudo docker pull jenkins/jenkins 查看镜像 123sudo docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEjenkins/jenkins latest 768d450bf188 2 days ago 619MB 启动Jenkins容器输入jenkins1sudo docker run -d -p 8088:8080 -p 50001:50000 -v /usr/local/jenkins:/var/jenkins_home -v /etc/localtime:/etc/localtime --name jenkins docker.io/jenkins/jenkins 启动参数说明： -d 后台运行镜像-p 8088:8080 将镜像的8080端口映射到服务器的8088端口-p 50001:50000 将镜像的50000端口映射到服务器的50001端口-v /usr/local/jenkins:/var/jenkins_home /var/jenkins_home目录为（容器）jenkins工作目录，我们将硬盘上的一个目录挂载到这个位置，方便后续更新镜像后继续使用原来的工作目录。-v /etc/localtime:/etc/localtime 让容器使用和服务器同样的时间设置。–name jenkins 给容器起一个别名 有可能会启动失败，这里需要对宿主机中的目录设置权限1sudo chown -R 1000:1000 /usr/local/jenkins 重新运行容器1sudo docker run -d -p 8088:8080 -p 50001:50000 -v /usr/local/jenkins:/var/jenkins_home -v /etc/localtime:/etc/localtime --name jenkins docker.io/jenkins/jenkins 查看容器 1sudo docker ps 12CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES869de06b4a9d jenkins/jenkins &quot;/sbin/tini -- /usr/…&quot; 8 minutes ago Up 8 minutes 0.0.0.0:8088-&gt;8080/tcp, 0.0.0.0:50001-&gt;50000/tcp jenkins 成功运行在了8080端口，可登录浏览器访问，前提是宿主机的8080端口需要开放 配置jenkins由于这里使用Docker启动的Jenkins，所以需要进入容器内部获取初始化密码 1docker exec jenkins tail /var/jenkins_home/secrets/initialAdminPassword 获取密码后在页面输入密码，点击Continue，进入插件安装界面，可以选择建议安装，也可以自定义安装 初次启动卡住很慢解决方案 ​ 进入Jenkins工作目录，修改./updates/default.json文件， 把 “connectionCheckUrl”:”http://www.google.com/&quot; 改为 “connectionCheckUrl”:”http://www.baidu.com/&quot; 12cd /usr/local/jenkins/updatesvim default.json]]></content>
      <categories>
        <category>持续集成</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker与Maven插件]]></title>
    <url>%2F2020%2F03%2F20%2F%E5%90%8E%E7%AB%AF%2F%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%2F3Maven%E6%8F%92%E4%BB%B6%E6%8E%A8%E9%80%81%2F</url>
    <content type="text"><![CDATA[通过maven插件构建Docker镜像上传私服​ 在持续集成过程中，项目工程 一般使用Maven编译打包，然后生成镜像，通过镜像上线， 能够大大提供上线效率，同时能够快速动态扩容，快速回滚，着实很方便。docker-maven-plugin 插件就是为了帮助我们在Maven工程中，通过简单的配置，自动生成镜像并推送到仓库中。 宿主机配置1. 首先在Docker宿主机中配置可通过远程访问，基于centos7系统12# 打开编辑文件vim /usr/lib/systemd/system/docker.service 在 ExecStart=/usr/bin/dockerd的后面加上-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock 1:wq保存退出 2. 重启Docker守护进程，重启Docker12systemctl daemon-reload systemctl start docker 在宿主机输入 **netstat -anp|grep 2375** 查看监听端口 在浏览器输入 192.168.125.121:2375/info 显示数据，表明端口一对外开放 3. registry私服仓库启动主机配置（win10） 一种是在电脑的环境变量种配置tcp 一种是通过DockerHost配置 这里采用第二种方式，具体pom文件如下 123456789101112131415161718192021222324252627282930313233&lt;build&gt; &lt;!--启动名称--&gt; &lt;finalName&gt;app&lt;/finalName&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;!--docker的maven插件--&gt; &lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;!--&lt;version&gt;1.0.0&lt;/version&gt;--&gt; &lt;configuration&gt; &lt;!--基础镜像的名称--&gt; &lt;baseImage&gt;jdk1.8&lt;/baseImage&gt; &lt;!--生成的镜像名称--&gt; &lt;imageName&gt;192.168.125.121:5000/$&#123;project.artifactId&#125;:$&#123;project.version&#125;&lt;/imageName&gt; &lt;!--相当于启动容器后自动执行java -jar命令--&gt; &lt;entryPoint&gt;["java", "-jar", "/$&#123;project.build.finalName&#125;.jar"]&lt;/entryPoint&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/&lt;/targetPath&gt; &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt; &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;dockerHost&gt;http://192.168.125.121:2375&lt;/dockerHost&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; 打包上传 这里使用了一个简单的springboot工程，提供/hello接口 在idea中打开Terminal命令窗口，进入要打包的工程目录下 1mvn install 打包完成之后，进行docker镜像制作和上传 1mvn docker:build -DpushImage 1234567891011121314151617181920212223242526272829Step 1/3 : FROM jdk1.8 ---&gt; 9962dfc8b892Step 2/3 : ADD /app1.jar // ---&gt; c3859ca47b38Step 3/3 : ENTRYPOINT ["java", "-jar", "/app1.jar"] ---&gt; Running in ed0ab6e3574fRemoving intermediate container ed0ab6e3574f ---&gt; 00e704f305bcProgressMessage&#123;id=null, status=null, stream=null, error=null, progress=null, progressDetail=null&#125;Successfully built 00e704f305bcSuccessfully tagged 192.168.125.121:5000/ckssblog:1.0[INFO] Built 192.168.125.121:5000/ckssblog:1.0[INFO] Pushing 192.168.125.121:5000/ckssblog:1.0The push refers to repository [192.168.125.121:5000/ckssblog]33dca580002a: Pushed851f2b8709b8: Layer already exists5c2a28ad5134: Layer already exists0683de282177: Layer already exists1.0: digest: sha256:49783be4a9117124457b53b08f076183fde33fe62571051e08effa688db18a2d size: 1161null: null[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 13.995 s[INFO] Finished at: 2020-03-19T19:34:35+08:00[INFO] ------------------------------------------------------------------------ maven执行命令 mvn clean package docker:build 只执行 build 操作 mvn clean package docker:build -DpushImage 执行 build 完成后 push 镜像 mvn clean package docker:build -DpushImageTag 执行 build 并 push 指定 tag 的镜像 注意：这里必须指定至少一个 imageTag，它可以配置到 POM 中，也可以在命令行指定。命令行指定如下：mvn clean package docker:build -DpushImageTags -DdockerImageTags=imageTag_1 -DdockerImageTags=imageTag_2，POM 文件中指定配置如下： 12345678910111213141516&gt; &lt;build&gt;&gt; &lt;plugins&gt;&gt; ...&gt; &lt;plugin&gt;&gt; &lt;configuration&gt;&gt; ...&gt; &lt;imageTags&gt;&gt; &lt;imageTag&gt;imageTag_1&lt;/imageTag&gt;&gt; &lt;imageTag&gt;imageTag_2&lt;/imageTag&gt;&gt; &lt;/imageTags&gt;&gt; &lt;/configuration&gt;&gt; &lt;/plugin&gt;&gt; ...&gt; &lt;/plugins&gt;&gt; &lt;/build&gt;&gt; 验证查看 切换到宿主机，查看docker镜像和镜像仓库 1docker images 可以看到docker中已经有该镜像192.168.125.121:5000/ckssblog 在地址栏输入 http://192.168.125.121:5000/v2/_catalog ，镜像仓库中也有新上传的镜像 通过镜像启动容器 1docker run -di --name=base -p 8099:8080 192.168.125.121:5000/ckssblog:1.0 打开浏览器地址，输入 http://192.168.125.121:8099/hello]]></content>
      <categories>
        <category>持续集成</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker搭建本地私服]]></title>
    <url>%2F2020%2F03%2F20%2F%E5%90%8E%E7%AB%AF%2F%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%2F2%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%8D%2F</url>
    <content type="text"><![CDATA[一、搭建私服​ 自己制作的镜像一般会上传到本地私服，首先得搭建一个docker私有仓库服务，docker的私服搭建也是非常简单 拉取私有仓库镜像1docker pull registry 启动 registry仓库容器1234docker run -d --restart=always --privileged=true \-p 5000:5000 \-v /usr/local/docker/data/registry:/var/lib/registry \--name registry registry:latest 参数说明，启动参数有一定顺序，可能会因为顺序不同而启动失败 –restart=always 此模式容器会跟 docker daemon会随着docker服务的重启而自动恢复-v /usr/local/docker/data/registry 把本地磁盘挂载到容器磁盘/var/lib/registry（默认情况下仓库存放镜像于容器内的/var/lib/registry目录下，宿主机目录需要提前创建）–name registry定义容器名-p 5000:5000 端口映射，本地端口5000映射到容器端口5000–-privileged=true ：配置了-v /opt/data/registry:/var/lib/registry ，如果没有关闭安全模块selinux，容器将没有权限访问本地目录，设置此参数可以给容器加特权。如果没有关闭selinux以及没有加上此参数，上传传镜像时可能会报权限错误(OSError: [Errno 13] Permission denied: ‘/var/lib/registry/repositories/library’)或者（Received unexpected HTTP status: 500 Internal Server Error）错误 启动成功后通过docker ps查看1docker ps 测试镜像仓库中所有的镜像12curl http://127.0.0.1:5000/v2/_catalog&#123;"repositories":[]&#125; 现在是空的，因为才刚运行，里面没有任何镜像内容。 问题启动docker容器时报错 1iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 5000 -j DNAT --to-destination 172.18.0.4:5000 ! -i br-ff45d935188b: iptables: No chain/target/match by that name. (exit status 1) 解决方案：重启docker 1systemctl restart docker 二、上传镜像至私服 首先添加可信任仓库1234# 编辑文件vim /etc/docker/daemon.json# 添加仓库配置 192.168.125.121:5000为宿主机地址加私服启动端口&quot;insecure-registries&quot;:[&quot;192.168.125.121:5000&quot;] 更新配置1systemctl daemon-reload 重新启动docker1systemctl restart docker 给原有镜像打标签1docker tag jdk1.8 192.168.125.121:5000/jdk1.8 上传到私有仓库1docker push jdk1.8 192.168.125.121:5000/jdk1.8 可以通过浏览器访问查看仓库1http://192.168.125.121:5000/v2/_catalog 其中仓库中出现 jdk1.8这个镜像。]]></content>
      <categories>
        <category>持续集成</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker基础镜像制作]]></title>
    <url>%2F2020%2F03%2F18%2F%E5%90%8E%E7%AB%AF%2F%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%2F%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[一、Docker基础镜像制作​ 使用docker运行java项目需要一个基础镜像，制作java环境基础镜像方式有很多，比如基于Alpine、ubuntu、centos，这里使用centos（比较习惯） 首先查找镜像 1docker search centos 拉取镜像docker pull centos，中间下载需要时间，下载完可以通过docker images查看 创建Dockerfile文件 12345678910# 创建存放Dockerfile的文件夹mkdir /usr/local/docker# 移动至目标目录cd /usr/local/docker# 创建jdk存放目录mkdir jdk1.8# 将jdk的压缩文件解压至该文件夹，或者将原有的复制进来cp -r /usr/local/java/jdk1.8.0_211/ ./jdk1.8/# 创建Docker文件vim Dockerfile Dockerfile文件如下 1234567891011121314#依赖镜像名称和IDFROM centos#指定镜像创建者信息MAINTAINER cksspk#执行命令，在容器中创建目录RUN mkdir /usr/local/java#ADD 是相对路径jar,把java添加到容器中ADD /jdk1.8/jdk1.8.0_211/ /usr/local/java/#配置java环境变量ENV JAVA_HOME /usr/local/java/ENV JRE_HOME $JAVA_HOME/jreENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATHENV PATH $JAVA_HOME/bin:$PATH 其中ADD之后的路径一定要注意文件前后都有 //，否则docker找不到会报错 1ADD failed: stat /var/lib/docker/tmp/docker-builder055888630/jdk1.8/jdk1.8.0_211/: no such file or directory 保存退出 使用Dockerfile制作镜像 1docker build -t=jdk1.8 . 制作完成之后可以通过docker images查看 如果没有报错，会出现上面第一个镜像，报错的也会有镜像，但是没有名称，这个docker制作的写时复制有关，一层一层传递，可以通过docker rmi &lt;ID&gt; 删除镜像 运行检查 后台运行镜像 12docker run -itd --name jdk8 jdk8da7084eaf0e79bc2336980e5ebeecb912dcac3f83b5fbce9fdcb449664d32d8a 查看容器状态 1docker ps 进入容器，并且查看jdk版本信息 1234567[root@localhost docker]# docker attach 117a34208989[root@117a34208989 /]# java -vresionUnrecognized option: -vresionError: Could not create the Java Virtual Machine.Error: A fatal exception has occurred. Program will exit.[root@117a34208989 /]# java -versionjava version "1.8.0_211" 退出容器 1exit 至此，基础镜像制作完成。]]></content>
      <categories>
        <category>持续集成</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker安装]]></title>
    <url>%2F2020%2F03%2F16%2FraspberryPi%2F%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%2F</url>
    <content type="text"><![CDATA[centos7上安装Docker Docker 要求 CentOS 系统的内核版本高于 3.10，通过 uname -r 命令查看当前系统的内核版本 12[root@localhost ~]# uname -r3.10.0-1062.9.1.el7.x86_64xxxxxxxxxx [root@localhost ~]# uname -r3.10.0-1062.9.1.el7.x86_64uname -rbash 将yum包更新到最新 1sudo yum update 安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 1sudo yum install -y yum-utils device-mapper-persistent-data lvm2 设置yum源，这里选择阿里仓库 1yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 可以查看仓库中所有docker版本，并选择所需要的安装 1yum list docker-ce --showduplicates | sort -r 安装docker, 可根据 sudo yum install &lt;FQPN&gt;选择版本，例如：sudo yum install docker-ce-17.12.0.ce 1sudo yum install docker-ce 启动docker 1systemctl start docker 查看docker是否安装成功 12345678910111213141516171819202122232425262728[root@localhost ~]# docker versionClient: Docker Engine - Community Version: 19.03.8 API version: 1.40 Go version: go1.12.17 Git commit: afacb8b Built: Wed Mar 11 01:27:04 2020 OS/Arch: linux/amd64 Experimental: falseServer: Docker Engine - Community Engine: Version: 19.03.8 API version: 1.40 (minimum version 1.12) Go version: go1.12.17 Git commit: afacb8b Built: Wed Mar 11 01:25:42 2020 OS/Arch: linux/amd64 Experimental: false containerd: Version: 1.2.13 GitCommit: 7ad184331fa3e55e52b890ea95e65ba581ae3429 runc: Version: 1.0.0-rc10 GitCommit: dc9208a3303feef5b3839f4323d9beb36df0a9dd docker-init: Version: 0.18.0 GitCommit: fec3683 树莓派上安装Dcoker 树莓派也需要查看版本 1lsb_release -a 这里一般分 buster和stretch版，我的是stretch，版本，所以接下来很多操作都关系这个，一定要注意。 编辑sources.list文件 1sudo vim /etc/apt/sources.list 12deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpideb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi 修改镜像源，改成国内的,这里需要根据版本选择，如果是上面说的stretch版本，那就使用上面配置，如果是buster，就是用下面这种 12deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpideb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi 修改raspi.list文件 1sudo vim /etc/apt/sources.list.d/raspi.list 将其它内容注释，添加如下，同样，如果是buster版本，需要将 stretch进行替换 12deb http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main uideb-src http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui 更新验证 1sudo apt-get update 安装HTTPS所依赖的包 123456sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ gnupg2 \ software-properties-common 添加 Docker 的GPG key 1curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - 验证Key id 1sudo apt-key fingerprint 0EBFCD88 根据系统版本设置Docker源 123echo "deb [arch=armhf] https://download.docker.com/linux/debian \ $(lsb_release -cs) stable" | \ sudo tee /etc/apt/sources.list.d/docker.list 安装 12sudo apt-get updatesudo apt-get install docker-ce 添加Docker用户组 12sudo groupadd dockersudo gpasswd -a $&#123;USER&#125; dockersudo service docker restart 启动验证 123456789101112131415161718192021222324252627282930 sudo systemctl start docker sudo docker version pi@raspberrypi:/root $ sudo docker versionClient: Docker Engine - Community Version: 19.03.8 API version: 1.40 Go version: go1.12.17 Git commit: afacb8b Built: Wed Mar 11 01:37:36 2020 OS/Arch: linux/arm Experimental: false Server: Docker Engine - Community Engine: Version: 19.03.8 API version: 1.40 (minimum version 1.12) Go version: go1.12.17 Git commit: afacb8b Built: Wed Mar 11 01:31:37 2020 OS/Arch: linux/arm Experimental: false containerd: Version: 1.2.13 GitCommit: 7ad184331fa3e55e52b890ea95e65ba581ae3429 runc: Version: 1.0.0-rc10 GitCommit: dc9208a3303feef5b3839f4323d9beb36df0a9dd docker-init: Version: 0.18.0 GitCommit: fec3683 Docker安装完后的配置 镜像源问题 Docker安装完之后，拉取源是非常缓慢的，因为默认源是在国外。。。可以通过配置国内的镜像源，这里使用的是网易镜像地址 编辑文件 1vim /etc/docker/daemon.json 添加参数（如果没有该文件，可以直接新建） 123&#123; "registry-mirrors": ["http://hub-mirror.c.163.com"]&#125; 重启 1systemctl restart docker 重启后可以尝试拉去镜像，比如 docker pull jenkins/jenkins Docker远程通信 编辑文件 1vim /lib/systemd/system/docker.service 修改配置，在ExecStart之后添加配置ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock]]></content>
      <categories>
        <category>持续集成</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基本软件安装]]></title>
    <url>%2F2020%2F03%2F15%2FraspberryPi%2FsoftwareInstall%2F</url>
    <content type="text"><![CDATA[JAVA环境（jdk1.8） 下载jdk 进入java官网 选择 Linux ARM 32 Hard Float ABI 版本下载 通过xshell软件上传至树莓派 解压配置环境 在软件目录解压 1tar -zxvf jdk-8u241-linux-arm32-vfp-hflt.tar.gz 编辑配置文件 1vim /etc/profile 在后面写入 123export JAVA_HOME=/opt/java/jdk1.8.0_241export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar 3.保存验证 修改文件后立即生效 1source /etc/profile 验证，输入 java -version，查看打印输出 1java -version 安装SVN服务器服务器配置 安装svn服务器 1sudo apt-get install subversion -y 创建仓库, 使用/home/pi/svn/svn_ckss作为仓库根路径 1svnadmin create /home/pi/svn/svn_ckss 修改配置文件 1vim /home/pi/svn/svn_ckss/conf/svnserve.conf ​ 去掉注释，一定要删除空格！！！ 让配置顶格写！！！ 配置用户信息 1vim /home/pi/svn/svn_ckss/conf/passwd 修改权限配置 1vim /home/pi/svn/svn_ckss/conf/authz 启动服务 1svnserve -d -r /home/pi/svn/svn_ckss 查看启动 1ps -ef | grep svnserve 启动成功 12root 19497 1 0 12:54 ? 00:00:00 svnserve -d -r /home/pi/svn/svn_taoge/root 19530 19172 0 13:13 pts/0 00:00:00 grep svnserve 停止服务 1killall svnserve 如果使用防火墙需要将3690端口开放 客户端配置客户端通过tortoiseSVN进行连接，下载地址 https://tortoisesvn.net/downloads.html 另外，中文语言包需要通版本保持一致 输入SVN服务器地址 :svn://192.168.0.108进行检出]]></content>
      <categories>
        <category>raspberryPi</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派相关设置]]></title>
    <url>%2F2020%2F01%2F22%2FraspberryPi%2FbaseCommand%2F</url>
    <content type="text"><![CDATA[树莓派硬件为3b+，系统版本debian9.9 查看树莓派系统参数命令如下 12345678getconf LONG_BIT # 查看系统位数uname -a # kernel 版本/opt/vc/bin/vcgencmd version # firmware版本strings /boot/start.elf | grep VC_BUILD_ID # firmware版本cat /proc/version # kernelcat /etc/os-release # OS版本资讯cat /etc/issue # Linux distro 版本cat /etc/debian_version # Debian版本编号 配置wifi连接 打开文件 1vim /etc/wpa_supplicant/wpa_supplicant.conf 增加配置 123456network=&#123; ssid="wifi名称" psk="wifi密码" priority=4 连接优先级，数字越大优先级越高（不可以是负数） #scan_ssid:连接隐藏WiFi时需要指定该值为1&#125; 拔网线，重启 1reboot 配置静态IP路由器的WiFi一般为自动分配，如果经常开关机都要去路由器上查看IP地址，很麻烦，因此这种情况配置静态IP就很方便 打开文件 1vim /etc/dhcpcd.conf 增加配置 12345678# 指定接口 eth0interface eth0# 指定静态IP，/24表示子网掩码为 255.255.255.0static ip_address=192.168.1.20/24# 路由器/网关IP地址static routers=192.168.1.1# 手动自定义DNS服务器static domain_name_servers=114.114.114.114 重启 1reboot]]></content>
      <categories>
        <category>raspberryPi</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[谷歌云与树莓派内网穿透frp]]></title>
    <url>%2F2019%2F11%2F09%2F%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%2F%E8%B0%B7%E6%AD%8C%E4%BA%91%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8Ffrp%2F</url>
    <content type="text"><![CDATA[之前很无聊买了个树莓派，一直吃灰，然后刚好谷歌云免费一年使用，于是打算拿来做服务器，并且可以随时通过外网访问，这就要使用到内网穿透服务了，这里通过frp穿透进行代理。 配置工具 谷歌云服务器 centos7 树莓派Debian 连接工具xshell 云服务器配置在一台刚创建的服务器上下载frp，使用xshell登录云服务器，在github中找到系统所对应版本, 这里使用 frp_0.27.1_linux_amd64.tar.gz 下载 123wget https://github.com/fatedier/frp/releases/download/v0.27.1/frp_0.27.1_linux_amd64.tar.gz#提示 -bash: wget: command not foundyum install wget -y 解压 1tar -zxvf frp_0.27.1_linux_amd64.tar.gz 修改名称 1mv frp_0.27.1_linux_amd64 frp 进入文件夹，删除不需要文件 12cd frprm -f frpc* 配置frps.ini 1vim frps.ini 1234567891011121314151617181920#配置文件[common]bind_addr = 0.0.0.0 #穿透监听端口与地址(0.0.0.0表示允许任何地址)bind_port = 10001protocol = tcptoken = a123 # 客户端连接令牌vhost_http_port = 80 #虚拟主机穿透监听端口(指http与https的访问端口)vhost_https_port = 443log_file = /opt/frp/frps.log # frp日志记录路径log_level = info # 日志记录级别(trace, debug, info, warn, error)log_max_days = 3 # 日志记录滚动天数dashboard_addr = 0.0.0.0 #服务端控制面板访问端口dashboard_port = 10002dashboard_user = USER # 服务端控制面板访问账号和密码，不设置则默认admindashboard_pwd = PASSWDtcp_mux = true # tcp流多路复用(可以理解为优化传输) ​ 启动 1./frps -c ./frps.ini 启动成功，可登录服务器地址:10002，访问控制面板 树莓派配置由于树莓派是arm架构,(如何查看linux架构，可通过uname -a命令查看)，所以需要使用frp_0.27.1_linux_arm64.tar.gz版本 下载(或者通过ftp工具传输) 1wget https://github.com/fatedier/frp/releases/download/v0.27.1/frp_0.27.1_linux_arm.tar.gz 解压、修改名称、删除不需要文件 1234tar -zxvf frp_0.27.1_linux_arm.tar.gzmv frp_0.27.1_linux_arm frpcd frprm -f frps* 配置frpc.ini 1vim frpc.ini 12345678910111213141516171819202122232425262728293031323334[common]server_addr = ******** 服务器地址server_port = 10001token=a123# 日志记录路径log_file = ./frpc.log# 日志记录级别(trace, debug, info, warn, error)log_level = info# 日志记录滚动天数log_max_days = 3# frpc客户端管理界面admin_addr = 127.0.0.1admin_port = 7400admin_user = adminadmin_passwd = passwd[ssh]type = tcplocal_ip = 127.0.0.1local_port = 22remote_port = 22315#http或者https模式主要针对于虚拟主机，访问的取决于frps.ini文件中的vhost_http_port设置[web01]type = httplocal_ip = 127.0.0.1local_port = 80custom_domains = cksspk.com #域名http_user = adminhttp_pwd = passwd 启动 34.94.17.49 1./frpc -c ./frpc.ini 验证 可通过xshell新建会话，输入 谷歌云IP地址，加上 frpc.ini文件中 remote_port = 22315端口，连接即可 后台启动通过上面的方式启动会占用当前shell, 一般会通过使用systemctl来控制启动 谷歌云配置1vim /lib/systemd/system/frps.service 123456789101112[Unit]Description=Frp Server ServiceAfter=network.target[Service]Type=simpleExecReload=/bin/kill -s HUP $MAINPIDExecStop=/bin/kill -s QUIT $MAINPIDExecStart=/opt/frp/frps -c /opt/frp/frps.ini # &quot;ExecStart=&quot;之后的路径要填写你的frps安装路径[Install]WantedBy=multi-user.target 树莓派配置1vim /lib/systemd/system/frpc.service 12345678910[Unit]Description=Frp Client ServiceAfter=network.target[Service]ExecStart=/opt/frp/frpc -c /opt/frp/frpc.ini # &quot;ExecStart=&quot;之后的路径要填写你的frps安装路径ExecStop=/bin/kill $MAINPID[Install]WantedBy=multi-user.target systemctl相关命令 启动 1systemctl start frps.service 查看状态 1systemctl status frps.service 停止 1systemctl stop frps.service 开机自启 1systemctl enable frps.service 停止开机自启 1systemctl disable frps.service]]></content>
      <tags>
        <tag>树莓派</tag>
        <tag>谷歌云</tag>
        <tag>云服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[谷歌云搭建]]></title>
    <url>%2F2019%2F11%2F03%2F%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%2F%E8%B0%B7%E6%AD%8C%E4%BA%91%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[官方首页 浏览器进入谷歌云地址 登陆账号 点击转到控制台 创建防火墙规则 点击左上角打开侧边栏 鼠标移至VPC网络 在展开的二级菜单中点击防火墙规则 点击创建防火墙 名称随便输入 比如: myrule01 目标选择 网络中所有实例（这个截图漏掉了） 来源IP地址范围 0.0.0.0/0 协议和端口选择 全部允许 创建VM实例 点击左上角打开侧边栏 鼠标移至Compute Engine 在展开的二级菜单中点击VM实例 点击创建 名称输入： cksspk01 区域选择： 洛杉矶 地区随意 机器配置：f1-micro(1个vCPU, 614MB内存) 启动磁盘：centos 7 防火墙：允许HTTP/HTTPS流量 点开配置，在网络选项 网络标记选择刚才创建的规则 点击创建 连接工具：Xshell 本地用xshell生成密钥匙 将密钥匙配置到谷歌云上]]></content>
      <tags>
        <tag>云服务器 谷歌云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo常用命令]]></title>
    <url>%2F2019%2F10%2F27%2Fhexo%2Fhexo%E4%BD%BF%E7%94%A8%E6%96%87%E7%AB%A0%E4%BD%BF%E7%94%A8%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[生成新的文章 -p：表示path 路径 hexo/hexo：表示在_posts目录下生成 hexo/hexo.md文件（有一层文件夹） 1hexo new page -p hexo/hexo 设置文章摘要​ 在内容中插入一行 1&lt;!-- more --&gt; ​ 效果如下 ​ 生成本地生成静态文件：hexo g将本地静态文件推送至Github：hexo d在文章中使用图片 在hexo根目录配置文件_config.yml设置属性 1post_asset_folder:true 在hexo的目录下执行 1npm install https://github.com/CodeFalling/hexo-asset-image --save 使用图片 1![logo](hexo使用文章使用图片/a.jpg)]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iphone_vpm]]></title>
    <url>%2F2019%2F07%2F14%2Fiphone-vpm%2F</url>
    <content type="text"><![CDATA[开启vpn共享给手机（手机连上美国地区网络切换App Store可以不用信用卡） appstore切换美国地区使用美国地区地址（http://www.haoweichi.com/Index） 在App Store下载Potatso Lite 打开Potatso Lite配置服务器地址 手机浏览器打开www.google.com]]></content>
  </entry>
  <entry>
    <title><![CDATA[nodeJs离线环境下安装配置]]></title>
    <url>%2F2019%2F06%2F26%2Fnodejs-outline%2F</url>
    <content type="text"><![CDATA[一、引言这段时间由于工作原因要使用到openlayers，然后去网上找资料，发现一个神奇的东西， gitbook（有可能链接点不开，qiang你懂得）。GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git的教程 ————百度百科 。 然后我就心痒痒，想在公司（内网）使用，于是开始了离线环境下搭建之旅。 二、安装配置 首先下载安装NodeJs 官网、百度云【提取码：emrm】 配置模块全局安装路径，方便找到位置，而且模块文件非常之多，放在c盘肯定不好 先查看路径 1npm config ls 设置全局模块路径 1npm config set prefix&quot;D:\Program Files\nodejs\node_global&quot; 设置缓存路径 1npm config set cache&quot;D:\Program Files\nodejs\node_cache&quot; 设置完之后可以同通过命令查看，配置信息 1npm config ls 然后就可以愉快的通过命令下载模块，比如 1npm install -g gitbook-cli 问题一：下载完之后通过gitbook -V命令提示： ‘gitbook’不是内部或外部命令，也不是可运行的程序或批量文件 此时需要配置环境变量，将新的全局模块路径添加到环境变量！！在path中追加 1D:\Program Files\nodejs\node_global; 问题二：在内网条件下安装nodeJs，并且将联网机中 node_global 及node_cache文件夹拷贝到开发机，通过上述命令设置好全局路径，通过gitbook -V命令显示 CLI version 2.3.2 ，然后卡住，报错，没有gitbook版本信息 解决方法：手动拷贝将联网机c盘用户文件下的.gitbook文件拷贝到开发机c盘用户目录。 gitbook命令安装完后可通过命令初始化一本书 1gitbook init 发布书籍 1gitbook serve 具体还有很多有操作可以参考这这篇文章，里面很多gitbook相关信息及资源 总结：通过此次发现nodeJs还是挺有有意思的，有非常多的模块，比如快速发布本地服务的http-server模块。而且它的文件形式比较容易理解。最后，在复制 node_global 文件夹的时候，windows或提示文件夹名称过长，这个时候需要用解压缩软件对文件夹压缩操作。。。这也算一个有点了坑的地方！！！！！]]></content>
      <categories>
        <category>nodeJs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
</search>
